@page "/user"
@using BUS.Service.Interface
@using BUS.ViewModel
@using BUS.ViewModel.User
@using MudBlazor
@inject IUserService userService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3" Class="mb-4">User List</MudText>

@if (_loading)
{
    <MudText Typo="Typo.body1">Loading...</MudText>
}
else if (_users != null && _users.Any())
{
    <MudTable Items="_users" Dense="true" Hover="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>PhoneNumber</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.Status</MudTd>
            <MudTd>@context.PhoneNumber</MudTd>
            <MudTd>
                <MudButton Color="Color.Primary" Size="Size.Small" OnClick="() => UpdateUser(context.UserId)">Edit</MudButton>
                <MudButton Color="Color.Error" Size="Size.Small" OnClick="() => ConfirmDeleteUser(context.UserId, context.Name)">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudText Typo="Typo.body1">No users found.</MudText>
}

<MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="AddUser" Class="mt-4">Add New User</MudButton>

<MudDialog @bind-IsVisible="_showDeleteConfirmation" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6">Confirm Delete</MudText>
        <MudText Typo="Typo.body1">Are you sure you want to delete <strong>@_userNameToDelete</strong>?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteUser">Delete</MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<UserVM> _users = new();
    private bool _loading = true;
    private bool _showDeleteConfirmation = false;
    private int _userIdToDelete;
    private string _userNameToDelete = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        _loading = true;
        try
        {
            _users = await userService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private void AddUser()
    {
        NavigationManager.NavigateTo("/usercreate");
    }

    private void UpdateUser(int id)
    {
        NavigationManager.NavigateTo($"/userupdate/{id}");
    }

    private void ConfirmDeleteUser(int userId, string userName)
    {
        _userIdToDelete = userId;
        _userNameToDelete = userName;
        _showDeleteConfirmation = true;
    }

    private async Task DeleteUser()
    {
        try
        {
            await userService.DeleteAsync(_userIdToDelete);
            _users.RemoveAll(u => u.UserId == _userIdToDelete);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
        finally
        {
            _showDeleteConfirmation = false;
        }
    }

    private void CancelDelete()
    {
        _showDeleteConfirmation = false;
    }
}
