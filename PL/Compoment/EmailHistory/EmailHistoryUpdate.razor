@page "/emailhistory/update/{Id:int}"
@using BUS.ViewModel.EmailHistory
@using BUS.Service.Interface
@using BUS.ViewModel.EmailHistory
@using MudBlazor
@inject IEmailHistoryService EmailHistoryService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3" Class="mb-4">Update Email History</MudText>

<MudPaper Elevation="1" Class="pa-4">
    <MudForm @ref="form">
        <MudTextField Label="Email ID" Type="number" @bind-Value="_emailHistory.EmailId" Disabled="true" Class="mb-3" />
        <MudTextField Label="Recipient" @bind-Value="_emailHistory.Recipient" Required="true" Class="mb-3" />
        <MudSelect T="string" Label="Status" @bind-Value="_emailHistory.Status" Required="true" Class="mb-3">
            <MudSelectItem Value="@("delivered")">Delivered</MudSelectItem>
            <MudSelectItem Value="@("opened")">Opened</MudSelectItem>
            <MudSelectItem Value="@("bounced")">Bounced</MudSelectItem>
            <MudSelectItem Value="@("failed")">Failed</MudSelectItem>
        </MudSelect>
        <MudTextField Label="Error Message" @bind-Value="_emailHistory.ErrorMessage" Class="mb-3" />
        <MudTextField Label="Retry Count" Type="number" @bind-Value="_emailHistory.RetryCount" Required="true" Class="mb-3" />
    </MudForm>
    <MudDivider Class="my-4" />
    <MudStack Direction="Row" Spacing="2">
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="UpdateEmailHistory">Update</MudButton>
        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
    </MudStack>
</MudPaper>

@code {
    private EmailHistoryUpdateVM _emailHistory = new();
    private MudForm form;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEmailHistory();
    }

    private async Task LoadEmailHistory()
    {
        try
        {
            var emailHistory = await EmailHistoryService.GetByIdAsync(Id);
            _emailHistory = new EmailHistoryUpdateVM
            {
                HistoryId = emailHistory.HistoryId,
                EmailId = emailHistory.EmailId,
                Recipient = emailHistory.Recipient,
                Status = emailHistory.Status,
                ErrorMessage = emailHistory.ErrorMessage,
                RetryCount = emailHistory.RetryCount
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading email history: {ex.Message}");
        }
    }

    private async Task UpdateEmailHistory()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                await EmailHistoryService.UpdateAsync(_emailHistory);
                NavigationManager.NavigateTo("/emailhistories");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating email history: {ex.Message}");
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/emailhistories");
    }
}
